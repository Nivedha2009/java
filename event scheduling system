import java.awt.*;
import java.awt.event.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

// User Class
class User {
    private String name;
    private String email;

    public User(String name, String email) {
        this.name = name;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }
}

// Event Class
class Event {
    private String title;
    private LocalDateTime dateTime;
    private String location;
    private String description;
    private int capacity;
    private List<Attendee> attendees;

    public Event(String title, LocalDateTime dateTime, String location, String description, int capacity) {
        this.title = title;
        this.dateTime = dateTime;
        this.location = location;
        this.description = description;
        this.capacity = capacity;
        this.attendees = new ArrayList<>();
    }

    public boolean registerAttendee(Attendee attendee) {
        if (attendees.size() < capacity) {
            attendees.add(attendee);
            return true;
        }
        return false;
    }

    public void displayEventInfo(TextArea textArea) {
        textArea.append("Event Title: " + title + "\n");
        textArea.append("Date and Time: " + dateTime + "\n");
        textArea.append("Location: " + location + "\n");
        textArea.append("Description: " + description + "\n");
        textArea.append("Capacity: " + capacity + "\n");
        textArea.append("Registered Attendees: " + attendees.size() + "/" + capacity + "\n");
        textArea.append("Spots Available: " + (capacity - attendees.size()) + "\n\n");
    }

    public String getTitle() {
        return title;
    }

    public int getCapacity() {
        return capacity;
    }

    public int getRegisteredCount() {
        return attendees.size();
    }
}

// Organizer Class
class Organizer extends User {
    public Organizer(String name, String email) {
        super(name, email);
    }

    public void createEvent(EventManager eventManager, String title, LocalDateTime dateTime, String location, String description, int capacity) {
        Event event = new Event(title, dateTime, location, description, capacity);
        eventManager.addEvent(event);
    }
}

// Attendee Class
class Attendee extends User {
    public Attendee(String name, String email) {
        super(name, email);
    }

    public boolean registerForEvent(Event event) {
        return event.registerAttendee(this);
    }
}

// EventManager Class
class EventManager {
    private List<Event> events;

    public EventManager() {
        events = new ArrayList<>();
    }

    public void addEvent(Event event) {
        events.add(event);
    }

    public List<Event> getEvents() {
        return events;
    }

    public void listEvents(TextArea textArea) {
        for (Event event : events) {
            event.displayEventInfo(textArea);
        }
    }
}

// Organizer Frame - For Event Creation
class OrganizerFrame extends Frame {
    private EventManager eventManager;
    private TextArea eventDisplayArea;
    private TextField titleField, dateField, timeField, locationField, descriptionField, capacityField;
    private UserFrame userFrame;

    public OrganizerFrame(EventManager eventManager) {
        this.eventManager = eventManager;
        setTitle("Organizer - Create Event");
        setSize(400, 500);
        setLayout(new FlowLayout());

        // Create components
        Label titleLabel = new Label("Event Title:");
        titleField = new TextField(20);

        Label dateLabel = new Label("Event Date (YYYY-MM-DD):");
        dateField = new TextField(10);

        Label timeLabel = new Label("Event Time (HH:MM):");
        timeField = new TextField(5);

        Label locationLabel = new Label("Location:");
        locationField = new TextField(20);

        Label descriptionLabel = new Label("Description:");
        descriptionField = new TextField(20);

        Label capacityLabel = new Label("Capacity:");
        capacityField = new TextField(5);

        Button createButton = new Button("Create Event");
        Button proceedToUserButton = new Button("Proceed to User Registration");

        eventDisplayArea = new TextArea(10, 50);

        // Add components to frame
        add(titleLabel);
        add(titleField);
        add(dateLabel);
        add(dateField);
        add(timeLabel);
        add(timeField);
        add(locationLabel);
        add(locationField);
        add(descriptionLabel);
        add(descriptionField);
        add(capacityLabel);
        add(capacityField);
        add(createButton);
        add(eventDisplayArea);
        add(proceedToUserButton);

        // Event handler for createButton
        createButton.addActionListener(e -> {
            String title = titleField.getText();
            String dateInput = dateField.getText();
            String timeInput = timeField.getText();
            String location = locationField.getText();
            String description = descriptionField.getText();
            int capacity = Integer.parseInt(capacityField.getText());

            // Convert date and time to LocalDateTime with validation
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
                LocalDateTime dateTime = LocalDateTime.parse(dateInput + " " + timeInput, formatter);

                // Create the event
                Organizer organizer = new Organizer("Organizer", "organizer@example.com");
                organizer.createEvent(eventManager, title, dateTime, location, description, capacity);

                // Display events
                eventDisplayArea.setText("");
                eventManager.listEvents(eventDisplayArea);
            } catch (Exception ex) {
                eventDisplayArea.append("Invalid date/time format. Please use YYYY-MM-DD and HH:MM format.\n");
            }
        });

        // Event handler for proceedToUserButton
        proceedToUserButton.addActionListener(e -> {
            if (userFrame == null) {
                userFrame = new UserFrame(eventManager);
            }
            userFrame.updateEventList();
            userFrame.setVisible(true);
        });

        // Frame setup
        setVisible(true);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                System.exit(0);
            }
        });
    }
}

// User Frame - For Event Registration
class UserFrame extends Frame {
    private EventManager eventManager;
    private TextArea eventDisplayArea;
    private TextField nameField, emailField;
    private Choice eventChoice;

    public UserFrame(EventManager eventManager) {
        this.eventManager = eventManager;
        setTitle("User - Register for Events");
        setSize(400, 400);
        setLayout(new FlowLayout());

        // Create components
        Label nameLabel = new Label("Your Name:");
        nameField = new TextField(20);

        Label emailLabel = new Label("Your Email:");
        emailField = new TextField(20);

        Button registerButton = new Button("Register for Event");

        eventChoice = new Choice(); // Drop-down to choose an event
        eventDisplayArea = new TextArea(10, 50);

        // Add components to frame
        add(nameLabel);
        add(nameField);
        add(emailLabel);
        add(emailField);
        add(new Label("Choose Event:"));
        add(eventChoice);
        add(registerButton);
        add(eventDisplayArea);

        // Event handler for registerButton
        registerButton.addActionListener(e -> {
            String attendeeName = nameField.getText();
            String attendeeEmail = emailField.getText();
            Attendee attendee = new Attendee(attendeeName, attendeeEmail);

            // Get selected event
            String selectedEventTitle = eventChoice.getSelectedItem();
            Event selectedEvent = null;
            for (Event event : eventManager.getEvents()) {
                if (event.getTitle().equals(selectedEventTitle)) {
                    selectedEvent = event;
                    break;
                }
            }

            if (selectedEvent != null) {
                boolean registered = attendee.registerForEvent(selectedEvent);
                if (registered) {
                    eventDisplayArea.append("Successfully registered for the event.\n");
                } else {
                    eventDisplayArea.append("Registration failed. Event may be full.\n");
                }

                // Refresh event display
                eventDisplayArea.append("Spots Available: " + (selectedEvent.getCapacity() - selectedEvent.getRegisteredCount()) + "\n\n");
            } else {
                eventDisplayArea.append("No event selected or event not found.\n");
            }
        });

        // Frame setup
        setVisible(false);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                System.exit(0);
            }
        });
    }

    public void updateEventList() {
        eventChoice.removeAll();
        for (Event event : eventManager.getEvents()) {
            eventChoice.add(event.getTitle());
        }
    }
}

// Main class to run the application
public class EventManagerApp {
    public static void main(String[] args) {
        EventManager eventManager = new EventManager();

        // Create Organizer Frame for creating events
        new OrganizerFrame(eventManager);
    }
}
